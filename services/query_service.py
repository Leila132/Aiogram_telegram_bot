from repositories.query_repository import QueryRepository
from schemas import TableRow
from models import Query
from config.conf_logger import logger


class QueryService:
    def __init__(self, repository: QueryRepository):
        self.repository = repository

    async def create_query(self, query: TableRow) -> Query:
        try:
            created = await self.repository.create(query.dict())
            logger.info("SERVICE successful in create_query")
            return created
        except:
            logger.error(f"SERVICE Error in create_query", exc_info=True)
            return None

    async def get_queries(self) -> str:
        try:
            queries = await self.repository.get_all()

            if not queries:
                return "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π."

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìã *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π:*\n\n"

            for index, query in enumerate(queries, start=1):
                message += (
                    f"üîπ *–ó–∞–ø–∏—Å—å #{index}*\n"
                    f"‚ñ™ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {query.title}\n"
                    f"‚ñ™ *–°—Å—ã–ª–∫–∞:* {query.url}\n"
                    f"‚ñ™ *XPath:* `{query.xpath}`\n"
                )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            message += f"üìä *–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(queries)}*"

            logger.info("SERVICE successful in get_queries")
            return message

        except Exception as e:
            logger.error(f"SERVICE Error in get_queries: {str(e)}", exc_info=True)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ë–î"
